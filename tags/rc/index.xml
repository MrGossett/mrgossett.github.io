<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Rc on MrGossett </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>https://mrgossett.github.io/tags/rc/</link>
    <language>en-us</language>
    
    
    <updated>Thu, 14 May 2015 14:28:56 -0400</updated>
    
    <item>
      <title>~/.gitconfig aliases</title>
      <link>https://mrgossett.github.io/post/gitconfig/</link>
      <pubDate>Thu, 14 May 2015 14:28:56 -0400</pubDate>
      
      <guid>https://mrgossett.github.io/post/gitconfig/</guid>
      <description>I use git from the command line as part of my regular workflow. Configuring aliases saves just a few keystrokes, but those keystrokes add up (My bash history says I&amp;rsquo;ve executed git commands 121 times in my current shell session, which has spanned about two workdays). I have git itself aliased to g in my ~/.bashrc. git allows aliasing subcommands in the [alias] section of ~/.gitconfig. Below are my aliases in workflow order: Fetch &amp;amp; Checkout To kick it off, I typically git fetch from remote to make sure git is aware of the branches that exist on the remote end.</description>
    </item>
    
    <item>
      <title>~/.golangrc</title>
      <link>https://mrgossett.github.io/post/golangrc/</link>
      <pubDate>Wed, 25 Mar 2015 14:05:03 -0400</pubDate>
      
      <guid>https://mrgossett.github.io/post/golangrc/</guid>
      <description>TL;DR I wrote some bash functions that are a regular part of my workflow. Check them out Go source I have Go&amp;rsquo;s source cloned in ~/goroot. Since the source is now managed with git, I can switch between versions very easily, and I can browse the source for Go&amp;rsquo;s standard library using my editor. To clone the source, I did this: git clone https://go.googlesource.com/go ~/goroot Since this constitutes &amp;ldquo;installing [Go] to a custom location&amp;rdquo;, Go will need a few environment variables set: export GOROOT=$HOME/goroot export GOPATH=$HOME/go export GOBIN=$GOROOT/bin export PATH=$GOBIN:$PATH Helper functions I wrote a few helper functions which are basically aliases for commands I execute often.</description>
    </item>
    
    <item>
      <title>route 53</title>
      <link>https://mrgossett.github.io/post/route-53/</link>
      <pubDate>Tue, 17 Mar 2015 07:26:35 -0400</pubDate>
      
      <guid>https://mrgossett.github.io/post/route-53/</guid>
      <description>At work, we created an internal API for vending sub-domains of a particular, somewhat popular domain we own. The project is written in Go and wraps the AWS Route 53 API to manage DNS records. We decided to use github.com/mitchellh/goamz, which is has pretty well-rounded implementations of most of the AWS APIs. When using goamz/route53, things were working perfectly when aws.GetAuth was passed credentials directly&amp;ndash;i.e., the things I normally set as AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY.</description>
    </item>
    
    <item>
      <title>awsenv</title>
      <link>https://mrgossett.github.io/post/awsenv/</link>
      <pubDate>Sun, 08 Mar 2015 21:06:46 -0400</pubDate>
      
      <guid>https://mrgossett.github.io/post/awsenv/</guid>
      <description>TL;DR I have this cool awsenv function. Check it out Full disclosure: the awsenv function in this post is based on a zsh script my co-worker phemmer wrote. I ported it to bash. Why? I deal with a few different AWS accounts in the course of a day. We use separate accounts at work for our development and production deploys, and I also have a personal account to kick around. AWS has a nice suite of command-line utilities, but there&amp;rsquo;s one aspect that I don&amp;rsquo;t agree with: credential management.</description>
    </item>
    
    <item>
      <title>aws tab complete</title>
      <link>https://mrgossett.github.io/post/aws-tab-complete/</link>
      <pubDate>Sat, 07 Mar 2015 21:06:46 -0400</pubDate>
      
      <guid>https://mrgossett.github.io/post/aws-tab-complete/</guid>
      <description>I would go insane if I did&amp;rsquo;t wire-up tab completion for the aws CLI. There are just too many commands to remember. To do that, I dropped this line in my .awsrc: complete -C aws_completer aws So now when I type aws &amp;lt;tab&amp;gt;, I get a list of possible commands, like this: ~ $ aws &amp;lt;tab&amp;gt; autoscaling ec2 rds cloudformation ecs redshift cloudhsm elasticache route53 cloudsearch elasticbeanstalk route53domains cloudsearchdomain elastictranscoder</description>
    </item>
    
    <item>
      <title>~/.dockerrc</title>
      <link>https://mrgossett.github.io/post/dockerrc/</link>
      <pubDate>Fri, 20 Feb 2015 21:06:46 -0400</pubDate>
      
      <guid>https://mrgossett.github.io/post/dockerrc/</guid>
      <description>We use Docker at work as part of our deployment strategy. Since we ship dockerized apps, Docker is part of our development environment. I develop in OS X, so I use Boot2Docker. One of the original core contributors to Docker, @creack, was part of our team for a while. It was a great opportunity to get familiar with Docker as a technology. He helped me put together a ~/.dockerrc file that ensures my development environment is always ready to go.</description>
    </item>
    
  </channel>
</rss>

