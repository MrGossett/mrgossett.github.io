<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Go on MrGossett </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://mrgossett.com/tags/go/</link>
    <language>en-us</language>
    
    
    <updated>Tue, 14 Apr 2015 09:22:04 -0400</updated>
    
    <item>
      <title>The mux.Vars Problem</title>
      <link>http://mrgossett.com/post/mux-vars-problem/</link>
      <pubDate>Tue, 14 Apr 2015 09:22:04 -0400</pubDate>
      
      <guid>http://mrgossett.com/post/mux-vars-problem/</guid>
      <description>We&amp;rsquo;ve begun to use github.com/gorilla/mux at work as a router for many of our services. I ran into a snag when writing some unit tests, and learned a bit about the design of mux in the process. A quick detour When I say &amp;ldquo;unit tests&amp;rdquo;, I mean this: &amp;hellip; a software development process in which the smallest testable parts of an application, called units, are individually and independently scrutinized for proper operation.</description>
    </item>
    
    <item>
      <title>~/.golangrc</title>
      <link>http://mrgossett.com/post/golangrc/</link>
      <pubDate>Wed, 25 Mar 2015 14:05:03 -0400</pubDate>
      
      <guid>http://mrgossett.com/post/golangrc/</guid>
      <description>TL;DR I wrote some bash functions that are a regular part of my workflow. Check them out Go source I have Go&amp;rsquo;s source cloned in ~/goroot. Since the source is now managed with git, I can switch between versions very easily, and I can browse the source for Go&amp;rsquo;s standard library using my editor. To clone the source, I did this: git clone https://go.googlesource.com/go ~/goroot Since this constitutes &amp;ldquo;installing [Go] to a custom location&amp;rdquo;, Go will need a few environment variables set: export GOROOT=$HOME/goroot export GOPATH=$HOME/go export GOBIN=$GOROOT/bin export PATH=$GOBIN:$PATH Helper functions I wrote a few helper functions which are basically aliases for commands I execute often.</description>
    </item>
    
    <item>
      <title>Collaborative Apps with Go at Citrix</title>
      <link>http://mrgossett.com/post/collaborative-apps-go-citrix/</link>
      <pubDate>Tue, 17 Mar 2015 08:59:18 -0400</pubDate>
      
      <guid>http://mrgossett.com/post/collaborative-apps-go-citrix/</guid>
      <description>Reposted from the Firebase blog Collaborative Apps with Go at Citrix Tim Gossett and his colleague Steven Berlanga are Backend Developers for the Realtime Platform Group at Citrix. They build services to enable collaborative web and mobile apps. Our team is developing realtime communications technology, and weâ€™re using Firebase for low-latency data sync. Our platform provides a rally point for mobile and web clients to connect and start collaborating. Part of that collaboration happens in Firebase.</description>
    </item>
    
    <item>
      <title>route 53</title>
      <link>http://mrgossett.com/post/route-53/</link>
      <pubDate>Tue, 17 Mar 2015 07:26:35 -0400</pubDate>
      
      <guid>http://mrgossett.com/post/route-53/</guid>
      <description>At work, we created an internal API for vending sub-domains of a particular, somewhat popular domain we own. The project is written in Go and wraps the AWS Route 53 API to manage DNS records. We decided to use github.com/mitchellh/goamz, which is has pretty well-rounded implementations of most of the AWS APIs. When using goamz/route53, things were working perfectly when aws.GetAuth was passed credentials directly&amp;ndash;i.e., the things I normally set as AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY.</description>
    </item>
    
  </channel>
</rss>

