<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Aws on MrGossett </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://mrgossett.com/tags/aws/</link>
    <language>en-us</language>
    
    
    <updated>Mon, 09 Nov 2015 21:09:14 -0400</updated>
    
    <item>
      <title>eb config --&gt; deploy</title>
      <link>http://mrgossett.com/post/eb-config-deploy/</link>
      <pubDate>Mon, 09 Nov 2015 21:09:14 -0400</pubDate>
      
      <guid>http://mrgossett.com/post/eb-config-deploy/</guid>
      <description>I learned something useful the other day. We use AWS ElasticBeanstalk (let&amp;rsquo;s just call it EB) at work for deploying the various components of our SOA. I use the eb CLI tool a lot when working with those EB apps. EB stores the configuration data it needs for each app as a YAML file in S3. One of the commands the eb CLI provides is eb config, which allows management of those YAML files from the command line: eb config list to list the saved configurations in S3 eb config save to download a YAML file that describes the current configuration of the app eb config put to upload a YAML file from local disk to S3 etc.</description>
    </item>
    
    <item>
      <title>route 53</title>
      <link>http://mrgossett.com/post/route-53/</link>
      <pubDate>Tue, 17 Mar 2015 07:26:35 EDT</pubDate>
      
      <guid>http://mrgossett.com/post/route-53/</guid>
      <description>At work, we created an internal API for vending sub-domains of a particular, somewhat popular domain we own. The project is written in Go and wraps the AWS Route 53 API to manage DNS records. We decided to use github.com/mitchellh/goamz, which is has pretty well-rounded implementations of most of the AWS APIs. When using goamz/route53, things were working perfectly when aws.GetAuth was passed credentials directly&amp;ndash;i.e., the things I normally set as AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY.</description>
    </item>
    
    <item>
      <title>awsenv</title>
      <link>http://mrgossett.com/post/awsenv/</link>
      <pubDate>Sun, 08 Mar 2015 21:06:46 EDT</pubDate>
      
      <guid>http://mrgossett.com/post/awsenv/</guid>
      <description>TL;DR I have this cool awsenv function. Check it out Full disclosure: the awsenv function in this post is based on a zsh script my co-worker phemmer wrote. I ported it to bash. Why? I deal with a few different AWS accounts in the course of a day. We use separate accounts at work for our development and production deploys, and I also have a personal account to kick around. AWS has a nice suite of command-line utilities, but there&amp;rsquo;s one aspect that I don&amp;rsquo;t agree with: credential management.</description>
    </item>
    
    <item>
      <title>aws tab complete</title>
      <link>http://mrgossett.com/post/aws-tab-complete/</link>
      <pubDate>Sat, 07 Mar 2015 21:06:46 -0400</pubDate>
      
      <guid>http://mrgossett.com/post/aws-tab-complete/</guid>
      <description>I would go insane if I did&amp;rsquo;t wire-up tab completion for the aws CLI. There are just too many commands to remember. To do that, I dropped this line in my .awsrc: complete -C aws_completer aws So now when I type aws &amp;lt;tab&amp;gt;, I get a list of possible commands, like this: ~ $ aws &amp;lt;tab&amp;gt; autoscaling ec2 rds cloudformation ecs redshift cloudhsm elasticache route53 cloudsearch elasticbeanstalk route53domains cloudsearchdomain elastictranscoder</description>
    </item>
    
  </channel>
</rss>

